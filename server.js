// Imports
// source ./venv/bin/activate
const { performance } = require("perf_hooks");

const uWS = require("uWebSockets.js");
const dotenv = require("dotenv");
const ab2str = require("arraybuffer-to-string");
const jwt = require("jsonwebtoken");
const userSchema = require("./models/userModel");
const { motiConn } = require("./dbConnection");

const User = motiConn.model("User", userSchema);

// Environment variables
dotenv.config({ path: `${__dirname}/config.env` });
const httpPort = process.env.HTTP_PORT;
const wsPort = process.env.WS_PORT;

// Express app
const app = require("./app");

// Create server
const server = require("http").createServer(app);

// TODO: Change code like this: https://github.com/uNetworking/uWebSockets.js/discussions/414
const isUserNew = async (id) => {
  try {
    const user = await User.findById(id);
    return user.new;
  } catch (error) {
    console.log(error);
  }
};

// Holds all the websocket connections
const WsMap = new Map();

/**
 * Adds websocket to map
 */
const addToMap = (ws, id, map = new Map()) => {
  if (id === "rasa" && map.get("rasa")) {
    // necessary cuz rasa may connect twice
    // and using old connection won't work
    console.log("duplicate, replacing");
    map.delete("rasa");
    map.set(id, ws);
  } else if (!map.get(id)) {
    map.set(id, ws);
  }
};

/**
 * Removes websocket from map
 */
const removeFromMap = (id, map = new Map()) => {
  map.delete(id);
};

const wsApp = uWS
  .App()
  .ws("/chat", {
    compression: uWS.SHARED_COMPRESSOR,
    maxPayloadLength: 16 * 1024 * 1024,
    maxBackpressure: 1024,
    idleTimeout: 30,
    open: (ws) => {
      console.log("connected");
    },

    message: async (ws, message, isBinary) => {
      const data = JSON.parse(ab2str(message));
      let rasa;
      let response;

      switch (data.event) {
        case "ping":
          ws.send(JSON.stringify({ event: "pong" }));
          break;
        case "rasa_sub":
          // ws.subscribe("rasa/message");
          ws.id = "rasa";
          addToMap(ws, ws.id, WsMap);
          break;
        // Will subscribe to user topic once authenticated
        case "auth":
          rasa = WsMap.get("rasa");
          try {
            const token = jwt.verify(data.data.message, process.env.JWT_SECRET);

            ws.id = data.id; // uuid generated by client
            addToMap(ws, ws.id, WsMap); // e.g, id = 1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed
            console.log("ADDED:", WsMap);
            const isNew = await isUserNew(token.id);
            // // sets info in rasa
            // /EXTERNAL_set_info{"user_is_new": "true"}
            rasa.send(
              JSON.stringify({
                event: "user_message",
                data: {
                  message:
                    "/EXTERNAL_set_info" +
                    JSON.stringify({
                      user_name: token.name,
                      user_email: token.email,
                      user_id: token.id,
                      user_is_new: isNew,
                    }),
                  client_id: ws.id,
                },
              })
            );

            // if new user, start new user flow
            if (isNew) {
              rasa.send(
                JSON.stringify({
                  event: "user_message",
                  data: {
                    message: "/EXTERNAL_new_user",
                    client_id: ws.id,
                  },
                })
              );
            }
          } catch (error) {
            console.log(error);
            if (!data.data.message) {
              ws.end(4001, "No jwt provided");
            } else {
              ws.end(4000, "Invalid jwt");
            }
          }

          break;
        case "user_message":
          // console.log("Before get rasa");
          rasa = WsMap.get("rasa");
          // console.log("After get rasa");
          // console.log("Before send: ", Object.keys(rasa));

          const message = JSON.stringify({
            event: "user_message",
            data: {
              message: data.data.message,
              client_id: ws.id,
            },
          });

          rasa.send(message);
          break;

        case "bot_message":
          const wsId = data.id;
          console.log("ID: ", wsId);

          response = JSON.stringify({
            event: "bot_message",
            data: data.data,
          });

          // sends to specified user
          const user = WsMap.get(wsId);
          console.log("check: ", user);
          user.send(response);
          break;
        default:
          console.log("Another message: ", data);
      }
    },
    close: (ws, code, message) => {
      removeFromMap(ws.id, WsMap);
      console.log(
        `${ws.id} closed with code ${code}. Reason: ${ab2str(message)}`
      );
    },
    drain: (ws) => {
      console.log(`Backpressure: ${ws.getBufferedAmount()}`);
    },
  })
  .listen(parseInt(wsPort, 10), (listenSocket) => {
    if (listenSocket) {
      console.log(`Websocket listening on port ${wsPort}`);
    }
  });

server.listen(httpPort, () => {
  console.log(`HTTP server running on port ${httpPort}`);
});
